// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model - Photographers who create events
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  name         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  events       Event[]

  @@map("users")
}

// Event model - Photography events created by photographers
model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  location    String?
  slug        String   @unique  // URL-friendly identifier
  shareLink   String   @unique  // Unique link for visitors to access photos
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      Photo[]

  @@map("events")
}

// Photo model - Photos uploaded for an event
model Photo {
  id             String   @id @default(cuid())
  eventId        String
  url            String   // URL de l'image ORIGINALE (20MB, pour téléchargement 100%)
  displayUrl     String?  // URL OPTIMISÉE 1920px WebP (~400KB, pour affichage rapide)
  thumbnailUrl   String?  // URL de la miniature (future utilisation)
  blurDataUrl    String?  // Blur placeholder 10x10 pour le chargement progressif
  fileName       String   // Nom du fichier original
  fileSize       Int      // Taille du fichier original en octets
  width          Int?     // Largeur de l'image
  height         Int?     // Hauteur de l'image
  downloadCount  Int      @default(0) // Nombre de téléchargements
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  event          Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("photos")
}
